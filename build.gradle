apply plugin: "kotlin"
apply plugin: 'application'
apply plugin: 'docker'

buildscript {
    ext.kotlin_version = '1.1.2'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath group: 'se.transmode.gradle', name: 'gradle-docker', version: '1.2'
    }
}


sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

repositories {
    jcenter()
    mavenCentral()
    ivy {
        url "https://artifacts.alfresco.com/nexus/content/repositories/public"
    }
    maven { url "https://jitpack.io" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile 'junit:junit:4.11'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version: '4.3.8.RELEASE'
    compile 'com.github.mifmif:Generex:1.0.0'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.15'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.3.RELEASE'
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.8.7"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.7"
}

group = "elaurendeau"

// Include dependent libraries in archive.
mainClassName = "application.ApplicationRest"

jar {
    baseName = 'tensorflow-training-image-generator'
    version = '1.0.0'
    manifest {
        attributes "Main-Class": "$mainClassName"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}
